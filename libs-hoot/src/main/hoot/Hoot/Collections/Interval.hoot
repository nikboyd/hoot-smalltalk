@Notice :'Copyright 2010,2021 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

Java Util List import.
Java Util ArrayList import.

Hoot Magnitudes Number import.
Hoot Magnitudes Integer import.
Hoot Magnitudes FastInteger import.
Hoot Magnitudes SmallInteger importStatics.

Smalltalk Core Subject import.
Smalltalk Core Classified import.
Smalltalk Magnitudes Ordinal import.
Smalltalk Collections Collected import.
Smalltalk Collections OrdinalRange import.

SequencedCollection subclass: 
OrdinalRange! Interval. "A sequence of ordinal numbers."

Interval class members: "creating instances"
[
    Interval! new [ 
        "a new empty Interval (0, 0, 0)"
        ^self from: Zero to: Zero by: Zero ]

    Interval! from: Ordinal! start to: Ordinal! stop [
        "a new Interval (start, stop, (stop - start) sign)"
    	^self from: start to: stop by: (stop - start) sign ]

    Interval! from: Ordinal! start to: Ordinal! stop by: Ordinal! step [
        "a new Interval (start, stop, step)"
    	^Interval basicNew: start : stop : step ]
]

Interval members: "constructing instances"
[
    "The interval start."
    Ordinal! start := Zero.

    "The interval stop."
    Ordinal! stop := Zero.

    "The interval step."
    Ordinal! step := Zero.

    "Constructs a new Interval."
    @Protected Interval: Ordinal! aStart : Ordinal! aStop : Ordinal! aStep [
     	start := aStart.
        stop := aStop.
        step := aStep.
    ]
]

Interval "accessing" members:
[
    @Private FastInteger! fastStart [ ^self start asSmallInteger asFastInteger ]
    @Private SmallInteger! smallStep [ ^self step asSmallInteger ]

    @Private Integer! start [ ^Integer <- start ]
    @Private Integer! stop  [ ^Integer <- stop ]
    @Private Integer! step  [ ^Integer <- step ]

    @Private @Primitive Int! startPrimly [ ^start intValue ]
    @Private @Primitive Int! stopPrimly [ ^stop intValue ]    
    @Private @Primitive Int! stepPrimly [ ^step intValue ]
    @Private @Primitive Int! countSteps [ ^(self stopPrimly - self startPrimly / self stepPrimly) + 1 ]

    Integer! first [ self emptyCheck. ^self start ]
    Integer! last  [ self emptyCheck. ^(self stop - (self stop - self start \\ step)) asInteger ]
    Integer! size  [ ^self notEmpty ifTrue: [ SmallInteger from: self countSteps ] ifFalse: [ Zero ] ]

    Behavior! species [ ^Behavior <- OrderedCollection type ]
]

Interval members: "comparing"
[
    Boolean! = Collected! aCollection [
        (Interval type accepts: aCollection) ifFalse: [ ^super equals: aCollection ].
        Interval! candidate := Interval <- aCollection.
        ^(candidate start = self start) and: [
         (candidate stop = self stop) and: [
         (candidate step = self step) ]]
    ]

    @Primitive Java Lang Int! hashCode [
    	Int! result := start hashCode.
        result <<= 2.
        result ^= stop hashCode.
        result <<= 1.
        result ^= step hashCode.
        ^result
    ]
]

Interval members: "accessing elements"
[
    @Protected Integer! get: Int! index [ ^self at: (SmallInteger from: index) + 1 ]
    Integer! at: Ordinal! index [ ^self at: index ifAbsent: [ self elementNotFound. ^Unity ] ]

    @Primitive Integer! at: Ordinal! index ifAbsent: NiladicValuable! aBlock [
        Int! i := self checkIndex: index ifAbsent: aBlock.
        i *= step intValue. i += start intValue.
        ^SmallInteger from: i ]
]

Interval members: "printing"
[
    String! printString [ ^( '(' , start printString , ' to: ' , stop printString , ' by: ' , step printString , ')' ) ]
]

Interval members: "copying elements"
[
    reverse [ ^Interval type from: stop to: start by: step negated asInteger ]
]

Interval members: "converting"
[
    @Primitive List? Ordinal! asList [
        List? Ordinal! results := ArrayList basicNew.
        self do: [ : Ordinal! v | results add: v. ].
        ^results
    ]
]

Interval members: "enumerating"
[
    @Primitive Closure! testBlock: FastInteger! index [ "index ranges based on step"
        ^self stepsDown ifTrue: [ [ ^(stop moreThan: index) not ] ] ifFalse: [ [ ^(index moreThan: stop) not ] ] ]

    do: MonadicValuable! aBlock [
        step = 0 ifTrue: [ ^self ]. "do nothing"
        FastInteger! index := self fastStart.
        (self testBlock: index) toPredicate whileTrue: [ aBlock value: index. index += self smallStep. ].
    ]

    OrderedCollection! collect: MonadicValuable! filterBlock [
        FastInteger! index := 0 asFastInteger. 
     	OrderedCollection! result := OrderedCollection new: self size.
        self do: [ : Ordinal! v | index += 1. result at: index put: (filterBlock value: v). ].
        ^result
    ]
]

Interval members: "testing"
[
    Boolean! stepsDown [ ^step < 0 ]
    @Primitive Java Lang Boolean! stepsDownward [ ^step intValue < 0 ]

    @Primitive Java Lang Boolean! isEmpty [
        (step intValue == 0) ifTrue: [ ^true ].
    	^step intValue < 0
            ifTrue:  [ (start intValue < stop intValue) ]
            ifFalse: [ (stop intValue < start intValue) ] ]

    Boolean! includes: Subject! aValue [
        (aValue isKindOf: Integer type) ifFalse: [ ^false ].
        Integer! candidate := Integer <- aValue.
        ^(Boolean from: ((candidate < self first) or: [candidate > self last])) not ]
]

Interval members: "mutations - not allowed"
[
    Subject! add: Subject! element [ self immutabilityError. ^0 ]
    @Protected Object! add: Object! element at: Int! index [ self immutabilityError. ^0 ]

    Interval! removeAll [ self immutabilityError. ]
    Subject! removeFirst [ self immutabilityError. ^0 ]
    Subject! removeLast [ self immutabilityError. ^0 ]
    Subject! removeAtIndex: Ordinal! index [ self immutabilityError. ^0 ]
]
