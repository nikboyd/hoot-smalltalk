@Notice :'Copyright 2010,2025 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

Hoot Collections OrderedCollection import.
Hoot Runtime Names Primitive import.

Smalltalk Core Subject import.
Smalltalk Streams StreamWriter import.
Smalltalk Collections importAll.

CollectionStream? ElementType subclass: StreamWriter? ElementType! 
WriteStream? ElementType -> Object. "A write-able stream (on a collection)."

WriteStream class members:
[
    WriteStream! with: CollectedVariably! aCollection [ ^WriteStream basicNew: aCollection ]

    String! lineSeparator [ ^LineSeparator ]
]

WriteStream members: "constructing instances"
[
    "Contains the platform line separator."
    @Static @Final @Primitive Java Lang String! SeparatorName := 'line.separator'.
    @Static @Final String! LineSeparator := String from: (Primitive systemValue: SeparatorName).

    "Constructs a new WriteStream given (aCollection)."
    @Protected WriteStream: CollectedVariably? ElementType! aCollection [
     	super : aCollection. ]

    CollectedVariably? ElementType! contents [ ^CollectedVariably <- contents ]
]

WriteStream "writing" members:
[
    flush [ ^self ]

    cr [ self nextPutAll: CollectedReadably <- LineSeparator. ]
    tab [ self nextPut: ElementType <- Character type tab. ]
    space [ self nextPut: ElementType <- Character type space. ]

    nextPut: ElementType! element [
        (self collectsElements: Object <- element) ifTrue: [
            self contents add: element.
            self position: self position + 1.
        ].
    ]

    nextPutAll: CollectedReadably? ElementType! elements [
        elements notEmpty ifTrue: [
            (self collectsElements: Object <- elements first) ifTrue: [
                self contents addAll: elements.
                self position: self position + elements size.
            ]
        ].
    ]
]
