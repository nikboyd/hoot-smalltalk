@Notice :'Copyright 2010,2021 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

Smalltalk Magnitudes Numeric import.
Hoot Runtime Names Primitive import.

Integer subclass: LongInteger. "A long integer value."

LongInteger class "coercing" members:
[
    coerce: aNumber [ "a long value = aNumber" ^LongInteger from: aNumber primitiveLong ]
]

LongInteger class members: "characteristics"
[
    maximum [ "a max value" ^LongInteger from: Primitive elementaryMaxLong ]
    minimum [ "a min value" ^LongInteger from: Primitive elementaryMinLong ]

    SmallInteger! precision [ "the primitive precision" ^64 ]
    SmallInteger! radix [ "the primitive radix" ^2 ]
]

LongInteger members: "constructing instances"
[
    Java Lang Long! primitiveValue.
    LongInteger: Long! aLong [ primitiveValue := aLong. ]
    @Static LongInteger! from: Long! aLong [ ^LongInteger basicNew: aLong ]
]

LongInteger members: "converting"
[
    Long! asPrimitive [ ^self primitiveLong ]
    asLongInteger [ ^self ]

    Java Lang Float! primitiveFloat [ ^Java Lang Float valueOf: primitiveValue ]
    Java Lang Double! primitiveDouble [ ^Java Lang Double valueOf: primitiveValue ]
    Java Lang Number! elementaryNumber "converts this value to a Number" [ ^primitiveValue ]
    @Primitive Long! primitiveLong "converts this value to a long" [ ^primitiveValue ]

    @Static SmallInteger! Generality := 20.
    Integer! generality [ ^Generality ]
]

LongInteger members: "printing"
[
    String! printString [ ^String from: (Primitive printLong: self primitiveLong) ]
]


LongInteger members: "arithmetic - final"
[
    @Primitive @Final LongInteger! + LongInteger! aNumber [ ^LongInteger from: (self asPrimitive + aNumber asPrimitive) ]
    @Primitive @Final LongInteger! - LongInteger! aNumber [ ^LongInteger from: (self asPrimitive - aNumber asPrimitive) ]
    @Primitive @Final LongInteger! * LongInteger! aNumber [ ^LongInteger from: (self asPrimitive * aNumber asPrimitive) ]
    @Primitive @Final Number! / LongInteger! aNumber [
        aNumber asPrimitive == 0 ifTrue: [ self zeroDivide. ^self ].
        ^Fraction type numerator: self denominator: aNumber ]
]

LongInteger members: "arithmetic"
[
    + aNumber [ "this + aNumber"
        ^self generality < aNumber generality
            ifTrue: [ aNumber + self ]
            ifFalse: [ self + aNumber asLongInteger ] ]

    * aNumber [ "this * aNumber"
        ^self generality < aNumber generality
            ifTrue: [ aNumber * self ]
            ifFalse: [ self * aNumber asLongInteger ] ]

    Number! / Numeric! aNumber [ "this / aNumber"
        Number! n := Number <- aNumber. ^self / n asLongInteger ]

    @Primitive LongInteger! // LongInteger! aNumber [ "this // aNumber"
        aNumber asPrimitive == 0 ifTrue: [ self zeroDivide. ^self ].
        ^LongInteger from: (self asPrimitive / aNumber asPrimitive) ]

    @Primitive LongInteger! \\ LongInteger! aNumber [ "this \\ aNumber"
        aNumber asPrimitive == 0 ifTrue: [ self zeroDivide. ^self ].
        ^LongInteger from: (self asPrimitive % aNumber asPrimitive) ]
]

LongInteger members: "manipulating bits - concrete"
[
    @Primitive Integer! bitInvert [ ^LongInteger from: (Primitive invertBits: self longValue) ]
    @Primitive LongInteger! bitAnd: Ordinal! anInteger [ ^LongInteger from: self longValue & anInteger longValue ]
    @Primitive LongInteger! bitOr:  Ordinal! anInteger [ ^LongInteger from: self longValue | anInteger longValue ]
    @Primitive LongInteger! bitXor: Ordinal! anInteger [
        ^LongInteger from: (Primitive xorBits: self longValue : anInteger longValue) ]


    @Primitive Integer! bitAt: Ordinal! index [
        @Final Java Lang Int! x := (Integer <- index) primitiveInteger - 1.
        ((x < 0) | (x > 31)) ifTrue:
            [ (IllegalArgumentException basicNew: 'Bit index out of range, not 1 - 32') throw ].

        @Final LongInteger! s := LongInteger from: (1 << x).
        ^(self bitAnd: s) primitiveInteger == 0
            ifTrue: [ SmallInteger Zero ]
            ifFalse: [ SmallInteger Unity ]
    ]

    @Primitive LongInteger! bitAt: Ordinal! index put: Ordinal! bitValue [
        @Final Java Lang Int! x := (Integer <- index) intValue - 1.
        Java Lang Int! v := (Integer <- bitValue) intValue.
        ((x < 0) | (x > 31)) ifTrue:
            [ (IllegalArgumentException basicNew: 'Bit index out of range, not 1 - 32') throw ].

        @Final LongInteger! s := LongInteger from: (1 << x).
        (v == 0) ifTrue: [ ^LongInteger from: self longValue & s bitInvert longValue ].
        (v == 1) ifTrue: [ ^LongInteger from: self longValue | s longValue ].

        (IllegalArgumentException basicNew: 'Bit value must be 0 or 1') throw
    ]
]

LongInteger members: "bit shifts - primitive"
[
    @Primitive LongInteger! rightShift: Integer! count [ ^LongInteger from: self longValue >> count intValue ]
    @Primitive LongInteger! leftShift:  Integer! count [ ^LongInteger from: self longValue << count intValue ]
    @Primitive LongInteger! bitShift:   Ordinal! count [
        (Integer <- count) primitiveInteger < 0 ifTrue: [ ^self rightShift: Integer <- count negated ].
        ^self leftShift: Integer <- count
    ]
]
