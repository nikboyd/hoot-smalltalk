@Notice :'Copyright 2010,2021 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

Java Math BigInteger import.

Hoot Runtime Names Primitive import.
Hoot Runtime Faces IntegerValue import.
Hoot Streams TextWriteStream import.

Smalltalk Core Posit import.
Smalltalk Magnitudes Code import.
Smalltalk Magnitudes Scalar import.
Smalltalk Magnitudes Ordinal import.
Smalltalk Magnitudes Numeric import.
Smalltalk Streams StreamedSink import.

Rational subclass: @Abstract Ordinal! IntegerValue! Integer. "An integer value."

Integer class members:
[
    Java Lang Char! radixDigit: Number! index [ "a radix digit"
     	^RadixDigits charAt: index asSmallInteger primitiveInteger ]
]

Integer "accessing" members:
[
    @Private @Static Java Lang String! RadixDigits := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' primitiveString.

    @Protected Integer [ super. ]
    numerator "the numerator" [ ^self ]
    denominator "the denominator" [ ^Integer <- self class unity ]
]

Integer "comparing" members:
[
    Boolean! = Magnitude! aNumber [ ^(Number type accepts: aNumber) and: [ (Number <- aNumber) asInteger = self ] ]
    Boolean! <  Scalar! upperBound [ ^(Number type accepts: upperBound) and: [ (Number <- upperBound) asInteger > self ] ]
    Boolean! >  Scalar! lowerBound [ ^(Number type accepts: lowerBound) and: [ (Number <- lowerBound) asInteger < self ] ]

    @Primitive Boolean! = Integer! aNumber [
    	^Boolean from: 0 == (self asBigInteger compareTo: aNumber asBigInteger) ]

    @Primitive Boolean! < Integer! aNumber [
    	^Boolean from: 0 > (self asBigInteger compareTo: aNumber asBigInteger) ]

    @Primitive Boolean! > Integer! aNumber [
    	^Boolean from: 0 < (self asBigInteger compareTo: aNumber asBigInteger) ]

    Java Lang Int! hashCode [ ^self elementaryNumber hashCode ]
]

Integer "converting" members:
[
    asInteger [ ^self ]
    Int! intValue [ ^self primitiveInteger ]
    Long! longValue [ ^self primitiveLong ]
]

Integer members: "manipulating bits - base"
[
    bitAnd: Ordinal! anInteger [ ^(Integer <- anInteger) asSmallInteger bitAnd: self ]
    bitOr: Ordinal! anInteger [ ^(Integer <- anInteger) asSmallInteger bitOr: self ]
    bitXor: Ordinal! anInteger [ ^(Integer <- anInteger) asSmallInteger bitXor: self ]
    bitInvert [ ^SmallInteger from: (Primitive invertBits: self primitiveInteger) ]
]

Integer members: "manipulating bits"
[
    & Ordinal! anInteger [ ^self bitAnd: anInteger ]
    | Ordinal! anInteger [ ^self bitOr: anInteger ]

    Boolean! allMask: Ordinal! mask [ ^(self bitAnd: mask) = mask ]
    Boolean! anyMask: Ordinal! mask [ ^(self bitAnd: mask) ~= 0 ]
    Boolean! noMask: Ordinal! mask [ ^(self bitAnd: mask) == 0 ]

    bitAt: Ordinal! index [ ^self bitAt: (Integer <- index) asSmallInteger ]
    bitAt: Ordinal! index put: Ordinal! bitValue [
        ^self bitAt: (Integer <- index) asSmallInteger
            put: (Integer <- bitValue) asSmallInteger ]

    bitShift: Ordinal! count [ ^self bitAt: (Integer <- count) asSmallInteger ]
    highBit [ ^self asLargeInteger highBit ]
]

Integer "testing" members:
[
    Boolean! odd [ ^self even not ]
    Boolean! even [ ^(self \\ 2) == 0 ]
]

Integer members: "testing behavior"
[
    Boolean! isInteger [ ^true ]
]

Integer members: "arithmetic"
[
    - Ordinal! aNumber [ ^self - (Integer <- aNumber) ]
    + Ordinal! aNumber [ ^(Integer <- aNumber) + self ]
    * Ordinal! aNumber [ ^(Integer <- aNumber) * self ]

    - Numeric! aNumber [ ^self - (Number <- aNumber) asInteger ]
    + Numeric! aNumber [ ^(Number <- aNumber) asInteger + self ]
    * Numeric! aNumber [ ^(Number <- aNumber) asInteger * self ]

    - anInteger [ ^(LargeInteger basicNew: (self asBigInteger subtract: anInteger asBigInteger)) narrowGenerality ]
    + anInteger [ ^(LargeInteger basicNew: (self asBigInteger add: anInteger asBigInteger)) narrowGenerality ]
    * anInteger [ ^(LargeInteger basicNew: (self asBigInteger multiply: anInteger asBigInteger)) narrowGenerality ]
]

Integer "truncation" members:
[
    floor [ ^self ]
    ceiling [ ^self ]
    truncated [ ^self ]
    rounded [ ^self ]
]

Integer "mathematics" members:
[
    integerPart [ ^self ]
    Integer! negated [ ^0 - self ]
    raisedToInteger: anInteger [ ^(self asLargeInteger raisedToInteger: anInteger) narrowGenerality ]

    factorial [
     	self < self class zero ifTrue: [ self error: 'Negative integers cannot use #factorial'. ].
        FastInteger! result := self class unity.
        self class unity to: self do: [ : SmallInteger! n | result multiplyBy: n ].
        ^result asInteger ]

    gcd: Ordinal! aNumber [ ^(self asLargeInteger gcd: aNumber) narrowGenerality ]
    lcm: Ordinal! aNumber [
     	Integer! gcd := self gcd: Integer <- aNumber.
        gcd = 0 ifFalse: [ ^(self // gcd * aNumber) abs ].
        ^1 ]
]

Integer "enumerating" members:
[
    timesRepeat: NiladicValuable! aBlock [
     	FastInteger! count := self class unity.
        SmallInteger! unity := self class unity.
        [ count <= self ] whileTrue: [
            aBlock value.
            count add: unity.
        ].
    ]
]

Integer "printing" members:
[
    printOn: StreamedSink! aStream [ self printOn: aStream base: 10 showRadix: false. ]
    printOn: StreamedSink! aStream base: Ordinal! radix showRadix: Posit! showRadix [
     	self negative
            ifTrue: [
                aStream nextPut: $- .
                self negated asInteger printOn: aStream base: radix showRadix: showRadix. ]
            ifFalse: [
                showRadix ifTrue: [ radix printOn: aStream. aStream nextPut: $r. ].
                self printDigitsOn: aStream base: radix. ]. ]

    printDigitsOn: StreamedSink! aStream base: Ordinal! radix [
     	self >= radix ifTrue: [ self // radix printDigitsOn: aStream base: radix. ].
        aStream nextPut: (Character from: (self class radixDigit: self \\ radix)). ]

    String! printStringRadix: Ordinal! radix [
     	^self printStringRadix: radix showRadix: true ]

    String! printStringRadix: Ordinal! radix showRadix: Boolean! showRadix [
     	TextWriteStream! aStream := String type writeStream: 16.
        self printOn: aStream base: radix showRadix: showRadix.
        ^aStream contents ]
]
