@Notice :'Copyright 2010,2021 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

TestBase subclass: MagnitudesTest.
"Regression tests Smalltalk Magnitudes."

MagnitudesTest members:
[
    Array! testBlocks := #(
        '[ 5 + 6 ]'
        '[ 5 - 6 ]'
        '[ 5 * 6 ]'
        '[ 5 / 6 ]'
        '[ 5 % 6 ]'
        ''
        '[ 5 ** 30 ]'
        '[ (5 - 6) abs ]'
        '[ (5 / 6) rounded ]'
        '[ (5 / 6) reciprocal ]'
        ''
        '[ 5 abs ]'
        '[ 5 rounded ]'
        '[ 5 factorial ]'
        '[ 5 even ]'
        '[ 5 odd ]'
        '[ 5 floor ]'
        '[ 5 ceiling ]'
        '[ 5 negated ]'
        '[ 5 codePoint negated ]'
        ''
        '[ 5 min: 6 ]'
        '[ 5 codePoint min: Scalar <- 6 ]'
        '[ 5 max: 6 ]'
        '[ 5 codePoint max: Scalar <- 6 ]'
        '[ 5 and: 6 ]'
        '[ 5 or: 6 ]'
        ''
        '[ 5 @ 6 ]'
        '[ 5 >> 6 ]'
        '[ (5 / 6) + (6 / 5) ]'
        '[ 20 squared sqrt ]'
        ''
        '[ 5 bitInvert ]'
        '[ 5 bitOr: 7 ]'
        '[ 5 codePoint bitOr: Ordinal <- 7 ]'
        '[ 5 bitXor: 7 ]'
        '[ 5 codePoint bitXor: Ordinal <- 7 ]'
        '[ 5 bitAnd: 7 ]'
        '[ 5 codePoint bitAnd: Ordinal <- 7 ]'
        '[ 5 bitAt: 2 ]'
        '[ 5 codePoint bitAt: 2 ]'
        '[ 5 bitAt: 2 put: 0 ]'
        '[ 5 bitShift: 5 ]'
        '[ 5 codePoint bitShift: Ordinal <- 5 ]'
        '[ 5 bitShift: 0 - 5 ]'
        ''
        '[ 5 codePoint equals: Magnitude <- 5 ]'
        '[ 5 codePoint lessThan: Scalar <- 6 ]'
        '[ 6 codePoint moreThan: Scalar <- 5 ]'
        ''
        '[ 11.1234s5 ]'
        '[ 11.1234s5 floor ]'
        '[ 11.1234s5 ceiling ]'
        '[ 11.1234s5 primitiveByte ]'
        '[ 11.1234s5 primitiveShort ]'
        '[ 35.1234s5 primitiveCharacter ]'
        '[ 11.1234s5 primitiveInteger ]'
        '[ 11.1234s5 primitiveFloat ]'
        '[ 11.1234s5 + 5 ]'
        '[ 11.1234s5 + 3.14s4 ]'
        '[ 11.1234s5 - 3.14s4 ]'
        '[ 11.1234s5 * 3.14s4 ]'
        '[ 11.1234s5 / 3.14s4 ]'
        ''
        '[ $0 asInteger ]'
        '[ $9 isLiteral ]'
        '[ $9 isDigit ]'
        '[ $c isLetter ]'
        '[ $e isVowel ]'
        '[ $c isCharacter ]'
        '[ $c isAlphaNumeric ]'
        '[ $c asUpperCase ]'
        '[ $C asLowerCase ]'
        '[ $c isLowerCase ]'
        '[ $c isUpperCase ]'
        '[ $c < $f ]'
        '[ $c > $a ]'
        '[ $! in: (30 to: 35) ]'
        '[ $c > (Hoot Magnitudes Number <- 32) ]'
        '[ $! < (Hoot Magnitudes Number <- 34) ]'
        '[ Hoot Magnitudes Character from: 33 ]'
        ''
        '[ Hoot Magnitudes Character type tab isCharacter ]'
        '[ Hoot Magnitudes Character type quote isCharacter ]'
        '[ Hoot Magnitudes Character type escape isCharacter ]'
        '[ Hoot Magnitudes Character type formFeed isCharacter ]'
        '[ Hoot Magnitudes Character type lineFeed isCharacter ]'
        '[ Hoot Magnitudes Character type backspace isCharacter ]'
        '[ Hoot Magnitudes Character type carriageReturn isCharacter ]'
        '[ SmallInteger type maximum ]'
        '[ LongInteger type maximum ]'
        ''
        '[ 5 asLongInteger + 7 ]'
        '[ 5 asLongInteger - 7 ]'
        '[ 5 asLongInteger * 7 ]'
        '[ 5 asLongInteger + 7 asLongInteger ]'
        '[ 5 asLongInteger - 7 asLongInteger ]'
        '[ 5 asLongInteger * 7 asLongInteger ]'
        '[ 5 asLongInteger bitInvert ]'
        '[ 5 asLongInteger bitOr: 7 ]'
        '[ 5 asLongInteger bitXor: 7 ]'
        '[ 5 asLongInteger bitAnd: 7 ]'
        '[ 5 asLongInteger bitAt: 2 ]'
        '[ 5 asLongInteger bitAt: 2 put: 0 ]'
        '[ 5 asLongInteger + (Hoot Magnitudes Number <- 3) ]'
        '[ 5 asLongInteger * (Hoot Magnitudes Number <- 3) ]'
        ''
        '[ ( 12 / 4 ) asDecimal ]'
        '[ ( 127 / 40 ) asDecimal ]'
        '[ ( 1274 / 405 ) asDecimal ]'
        '[ ( 12742 / 4056 ) asDecimal ]'
        '[ ( 127424 / 40560 ) asDecimal ]'
        '[ ( 1274249 / 405606 ) asDecimal ]'
        '[ ( 12742492 / 4056061 ) asDecimal ]'
        '[ ( 127424922 / 40560612 ) asDecimal ]'
        ''
        '[ ( 1274249220 / 405606124 ) asDecimal ]'
        '[ ( 12742492206 / 4056061243 ) asDecimal ]'
        '[ ( 127424922065 / 40560612439 ) asDecimal ]'
        '[ ( 1274249220651 / 405606124395 ) asDecimal ]'
        '[ ( 12742492206511 / 4056061243952 ) asDecimal ]'
        '[ ( 127424922065116 / 40560612439525 ) asDecimal ]'
        '[ ( 1274249220651168 / 405606124395257 ) asDecimal ]'
        '[ ( 12742492206511680 / 4056061243952573 ) asDecimal ]'
        ''
        '[ Float type pi ]'
        '[ Float type pi asFloat ]'
        '[ Float type pi asFraction ]'
        '[ Float type pi asFraction asFloat ]'
        "[ Float type pi asFraction scaledZero ]"
        '[ Float type pi asFraction asScaledDecimal: 5 ]'
        ''
        '[ Float type pi asFloat cos ]'
        '[ Float type pi asFloat sin ]'
        '[ Float type pi asFloat tan ]'
        '[ Float type pi asFloat arcCos ]'
        '[ Float type pi asFloat arcSin ]'
        '[ Float type pi asFloat arcTan ]'
        '[ Float type pi asFloat radiansToDegrees ]'
        '[ Float type pi asFloat degreesToRadians ]'
        ''
        '[ 2.0 negated ]'
        '[ 2.0 floor ]'
        '[ 2.0 ceiling ]'
        '[ 2.0 ln ]'
        '[ 2.0 exp ]'
        '[ 2.0 negative ]'
        '[ 2.0 positive ]'
        '[ 2.0 strictlyPositive ]'
        ''
        '[ 2 asFloat = 2.0 ]'
        '[ 2.0 = 2.0 ]'
        '[ 2.0 > 3 ]'
        '[ 2.0 < 3 ]'
        '[ 2.0 - 3 ]'
        '[ 2.0 + 3 ]'
        '[ 2.0 * 3 ]'
        '[ 2.0 / 3 ]'
        ''
        '[ Double type pi ]'
        '[ Double type pi asFraction ]'
        '[ Double type pi asFraction asFloatD ]'
        ''
        '[ Double type pi cos ]'
        '[ Double type pi sin ]'
        '[ Double type pi tan ]'
        '[ Double type pi arcCos ]'
        '[ Double type pi arcSin ]'
        '[ Double type pi arcTan ]'
        '[ Double type pi radiansToDegrees ]'
        '[ Double type pi degreesToRadians ]'
        ''
        '[ Double type pi negated ]'
        '[ Double type pi floor ]'
        '[ Double type pi ceiling ]'
        '[ Double type pi ln ]'
        '[ Double type pi exp ]'
        '[ Double type pi negative ]'
        '[ Double type pi positive ]'
        '[ Double type pi strictlyPositive ]'
        ''
        '[ Double type epsilon ]'
        '[ Double type fminDenormalized ]'
        '[ Double type fminNormalized ]'
        '[ Double type zero ]'
        '[ Double type unity ]'
        '[ Double type e ]'
        '[ Double type emax ]'
        '[ Double type emin ]'
        '[ Double type fmax ]'
        '[ Double type fmin ]'
        ''
        '[ Double type pi = 3 ]'
        '[ Double type pi = 3 asFloatD ]'
        '[ Double type pi > 3 ]'
        '[ Double type pi > 3 asFloatD ]'
        '[ Double type pi < 4 ]'
        '[ Double type pi < 4 asFloatD ]'
        '[ Double type pi - 3 ]'
        '[ Double type pi + 3 ]'
        '[ Double type pi * 3 ]'
        '[ Double type pi / 3 ]'
    ).

    Void! runTest [ (TestableCode withAll: testBlocks) runTests. ]
]
