@Notice :'Copyright 2010,2021 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

Hoot Collections Interval import.
Hoot Magnitudes SmallInteger importStatics.
Smalltalk Collections Collected import.

TestBase subclass: IntegersTest.
"Confirms proper operation of various integer behaviors."

IntegersTest members: "testing integers"
[
    Void! runTest [
        self log printLine: 'starting small ...'.
        self testValues.
        self testFlyWeightRange.
        self log cr.
        self testIntegerMath.
        self testIntegerCompares.
        self log cr.
        self testIntervals.
    ]

    @Static @Final String! ValueReport := 'value %s = id %s'.
    reportValue: value [ self log printLine:
        (ValueReport formatWith: value printString : value identityHash printString). ]

    checkValue: SmallInteger! value [ self assertTrue: [ value == (self lookup: value) ] ]
    SmallInteger! lookup: SmallInteger! value [ ^SmallInteger flyweights getCached: value asPrimitive ]

    testValues [ "force flyweight caching"
        self log printLine: 'small integer flyweights:'.
        self testValue: Zero.
        self testValue: Unity.
        self testValue: Duality.
        self testValue: Negativity.
        self log cr.
        self passed: 'small integer flyweight values test'.
    ]

    testFlyWeightRange [
        0 to: SmallInteger flyweightCount - 1
        do: [ :SmallInteger! value |
            self checkValue: value.
            self checkValue: 0 - value.
        ].
        self passed: 'all integer flyweight checks'.
    ]

    testValue: SmallInteger! value [
        self checkValue: value.
        self reportValue: value.
    ]

    testIntegerMath [
        SmallInteger!
        value := Unity.
        value := value + Unity.
        value := value - Unity.
        self assertTrue: [ :v | Unity = v ] with: value.

        value := Duality.
        value := value + Duality.
        value := value - Duality.
        value := value * Duality.
        value := (value / Duality) asSmallInteger.
        self assertTrue: [ :v | Duality = v ] with: value.
        self passed: 'integer math operations'.
    ]

    testIntegerCompares [
        self assertTrue: [ 6 = 6 ].
        self assertTrue: [ 5 < 6 ].
        self assertTrue: [ 7 > 6 ].
        self passed: 'integer comparisons'.
    ]

    testIntervals [
        self assertFalse: [ Interval type new notEmpty ].
        Interval! x := 0 to: 50.
        x reverse. x first. x last. x size.
        self assertTrue: [ x notEmpty ].
        self report: '(1 to: 5) = ', (1 to: 5) printString.
        self assertTrue:  [ (1 to: 5) includes: 3 ].
        self assertFalse: [ (1 to: 5) includes: 7 ].
        self assertTrue:  [ (1 to: 5) equals: Collected <- (1 to: 5) ].

        "suppress exceptions"
        [ (1 to: 5) add: 6 ] runQuiet.
        [ (1 to: 5) removeFirst ] runQuiet.
        [ (1 to: 5) removeLast ] runQuiet.
        [ (1 to: 5) removeAll ] runQuiet.
        self passed: 'intervals tests'.
    ]
]
