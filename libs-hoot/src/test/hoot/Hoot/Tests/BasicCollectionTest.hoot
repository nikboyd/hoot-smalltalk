@Notice :'Copyright 2010,2021 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

Org Junit lowerCase importAll.
Smalltalk Collections importAll.

TestBase subclass: BasicCollectionTest.
"Confirms proper operation of collections."

BasicCollectionTest members:
[
    Array! sample := #( 5 4 3 2 1 ).
    Array! names := #( 'ddd' 'ccc' 'bbb' 'aaa' ).
    Array! tames := #( 'zzz' 'yyy' 'xxx' ).
    OrderedCollection! o := OrderedCollection new.

    @Override @Test Void! testOnce [ self runTest. ]

    @Override Void! runTest [
        self testBasics.
        self log cr.
        self testBagsSets.
        self log cr.
        self testCompares.
        self log cr.
        self testSorts.
        self log cr.
        self testStrings.
        self log cr.
        self testMatches.
        self log cr.
        self testCopies.
        self testReplacements.
    ]

    testBasics [
        self report: 'sample array   ' elements: sample.
        2 timesRepeat: [ o addAll: sample ].
        self report: 'twice collected' elements: o.

        self assertTrue: [ sample size * 2 == o size ].
        self passed: 'ordered collection size test'.

        o do: [ :each | self assertTrue: [ sample includes: each ]. ].
        self passed: 'ordered collection values test'.

        self report: '( 1 )' elements: (OrderedCollection type with: 1).
        self report: '( 1 2 )' elements: (OrderedCollection type with: 1 with: 2).
        self report: '( 1 2 3 )' elements: (OrderedCollection type with: 1 with: 2 with: 3).
        self report: '( 1 2 3 4 )' elements: (OrderedCollection type with: 1 with: 2 with: 3 with: 4).
        self report: 'new with all sample' elements: (OrderedCollection type withAll: sample).
        self report: 'sample remove last 3' elements: ((OrderedCollection type withAll: sample) removeLast: 3).
        self report: 'sample remove first 3' elements: ((OrderedCollection type withAll: sample) removeFirst: 3).
    ]

    testBagsSets [
        self report: '... then bagged' elements: o asBag.
        self report: 'sample sorted  ' elements: sample asSortedCollection.

        s := Set new.
        2 timesRepeat: [ s addAll: sample ].
        self report: 'set w/2 samples' elements: s.
        s removeAll: sample.
        self report: 'after removal  ' elements: s.
    ]

    testCompares [
        r := Array withThese: sample reverse.
        self report: 'sample reverse' elements: r.
        self report: 'range =  ( 1 to: 5 )' elements: ( 1 to: 5 ).
        self report: 'range = #( 1 2 3 4 5 )' value: ( ( 1 to: 5 ) = r ).
        self assertTrue: [ ( 1 to: 5 ) = r ].
        self passed: 'interval range tests'.
    ]

    testSorts [
        self report: 'names ' elements: names.
        self report: 'sorted' elements: names asSortedCollection.
    ]

    testStrings [
        String! aString := 'aaaa' , 'bbbb'.
        self log print: 'concat = '. self log printLine: aString.
        self log print: 'upper  = '. self log printLine: aString asUppercase.
        self log print: 'lower  = '. self log printLine: aString asUppercase asLowercase.
        self assertTrue: [ aString = aString asUppercase asLowercase ].
        self passed: 'string comparison test'.
    ]

    testMatches [
        self report: '(aaabbbccc) matches regex (aaa.*)' value: ('aaa.*'   matches: 'aaabbbccc').
        self report: '(aaabbbccc) matches regex (a+b+c+)' value: ('a+b+c+' matches: 'aaabbbccc').
        self passed: 'string pattern match tests'.
    ]

    testCopies [
        self report: 'names' elements: names.
        self report: 'names with zzz' elements: (names copyWith: 'zzz').
        self report: 'names without aaa' elements: (names copyWithout: 'aaa').
        self report: 'names without last' elements: (names copyWithout: names last).
        self report: 'names without first' elements: (names copyWithout: names first).
        self report: 'names copy (2 to: 4)' elements: (names copyFrom: 2 to: 4).
    ]

    testReplacements [
        rep := Array withThese: (names copyWithout: names first).
        self report: 'name replacements' elements: tames.
        self report: 'names replaced' elements: rep.
        self report: 'copied and replaced' elements: (names copyReplaceAll: rep with: tames).
        self report: 'names replacing ccc with eee' elements: (names copyReplacing: 'ccc' withObject: 'eee').
        self passed: 'element replacements'.
    ]

    Void! report: String! testName value: Boolean! value [
        self log print: testName. self log print: ' ? '.
        self log print: value printString. self log cr. ]

    Void! report: String! collectionName elements: Collected! c [
        self log print: collectionName. self log print: ' = ( '.
        c do: [ :each | self log print: each printString. self log space. ].
        self log print: ')'. self log cr. ]
]
