@Notice :'Copyright 2010,2025 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
'!

Samples Behaviors Object import.
Hoot Behaviors Boolean import.
Hoot Behaviors False import.
Hoot Collections Interval import.

Smalltalk Blocks importAll.
Smalltalk Core Subject import.
Smalltalk Magnitudes Scalar import.

Object subclass: @Abstract Ordered! Magnitude.
"Supports comparisons between (typically scalar) magnitudes."

Magnitude class members: []

Magnitude members:
[
    @Protected Magnitude [ super. ]
]

Magnitude members: "comparing values"
[
    @Override @Primitive Boolean! = Subject! candidate "whether (this = candidate)" [
        (candidate isKindOf: self species) primitiveBoolean ifFalse: [ ^False literal ].
        ^Boolean <- (candidate equals: self)
    ]

    @Override Boolean! <  Scalar! upperBound "whether (this >  upperBound)" [
        ^Boolean <- (upperBound > self)
    ]

    @Override Boolean! <= Scalar! upperBound "whether (this <= upperBound)" [
        ^Boolean from: (self > upperBound) not
    ]

    @Override Boolean! >  Scalar! lowerBound "whether (this >  lowerBound)" [
        ^Boolean <- (lowerBound < self)
    ]

    @Override Boolean! >= Scalar! lowerBound "whether (this >= lowerBound)" [
        ^Boolean <- (lowerBound <= self)
    ]

    @Override Boolean! between: Scalar! lowerBound and: Scalar! upperBound [
       "whether ((Interval from: lowerBound to: upperBound) includes: this)"
        ^Boolean <- (( lowerBound <= self ) and: [ self <= upperBound ])
    ]

    @Override Boolean! in: Interval! aRange [
        ^aRange includes: self
    ]

    Boolean! inside: Scalar! lowerBound and: Scalar! upperBound [
       "whether (lowerBound < this < upperBound)"
        ^Boolean <- (( lowerBound < self ) and: [ self < upperBound ])
    ]

    @Override Ordered! max: Scalar! aMagnitude [
        "a value = (the greater of this AND aMagnitude)"
    	self > aMagnitude ifTrue: [ ^self ].
        ^Ordered <- aMagnitude
    ]

    @Override Ordered! min: Scalar! aMagnitude [
        "a value = (the lesser of this AND aMagnitude)"
    	self < aMagnitude ifTrue: [ ^self ].
        ^Ordered <- aMagnitude
    ]
]