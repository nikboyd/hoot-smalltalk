@Notice :'Copyright 2010,2021 Nikolas S Boyd.
Permission is granted to copy this work provided this copyright statement is retained in all copies.
See https://gitlab.com/hoot-smalltalk/hoot-smalltalk/tree/master/LICENSE.txt for more details.'!

Hoot Runtime Maps MethodCache import.
Hoot Runtime Behaviors Typified import.
Hoot Runtime Behaviors HootRegistry import.

Behavior subclass: MetaclassBase. "Supports polymorphic meta-behavior for classes."

MetaclassBase members: "constructing instances"
[
    @Protected Java Lang Class! instanceClass.

    MetaclassBase: Java Lang Class! aClass "constructs a new Metaclass" [
        super.
        methodDictionary := MethodCache basicNew: aClass.
        HootRegistry registerType: MetaclassBase basicNew.
        self registerType.
    ]

    @Primitive MetaclassBase [
        methodDictionary := MethodCache basicNew: MetaclassBase class.
        instanceClass := MetaclassBase class.
    ]

    @Protected registerSubclass [ super registerSubclass. ]
]

MetaclassBase members: "testing behavior"
[
    @Override Boolean! isMetaclass [ ^true ]
]

MetaclassBase members: "accessing values"
[
    @Primitive String! namePrefix [
        Character! first := Character from: (self primitiveClass getName charAt: 0).
        first isVowel asPrimitive ifTrue: [ ^String from: 'an ' ].
        ^String from: 'a ' ]

    Behavior! instanceClass [
        Typified! result := HootRegistry getType: instanceClass.
        Behavior! casting := Behavior <- result.
        ^casting ]
]
